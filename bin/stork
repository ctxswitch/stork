#!/usr/bin/env ruby

begin
  require 'rubygems'
rescue LoadError
end

begin
  require 'stork'
rescue LoadError
  $LOAD_PATH << File.dirname(__FILE__) + "/../lib"
  require 'stork'
end

require 'optparse'
require 'ostruct'

class StorkApp
  def initialize
    @options = OpenStruct.new
    @options.config = ENV['STORK_CONFIG'] || "/etc/stork/config.rb"

    @opts = OptionParser.new do |o|
      o.banner = "Usage: stork sub-command action [options]"
      o.on("-c", "--config FILE", "Read configuration from the specified file") do |config|
        @options.config = config
      end
    end
  end

  def help(error = nil)
    puts "Error: #{error}" if error
    puts @opts.help
    puts
    puts "** COMMANDS **"
    plugins.sort.each do |plugin|
      const_name = "#{plugin}::#{plugin.to_s.gsub('Plugin', '')}"
      puts Module.const_get(const_name).help
    end
    exit 1
  end

  # Probably not the best way to keep track
  def plugins
    Module.constants.select{|m| m =~ /Plugin/}
  end

  def parse
    sub_command = ARGV.shift
    action = ARGV.shift

    if sub_command.nil? || action.nil?
      help "You need to pass a sub-command and an action."
    end

    sub_command_name = sub_command.to_s.capitalize
    action_name = action.to_s.capitalize

    opt_parse
    load_or_create_config
    
    plugin_name = "#{sub_command_name}#{action_name}"
    module_name = "#{plugin_name}Plugin"
    constant_name = "#{module_name}::#{plugin_name}"
    
    begin
      klass = Stork.const_get(constant_name)
      @plugin = klass.new(@options, ARGV)
    rescue NameError => err
      help "Unknown sub-command"
    rescue Errno::ENOENT => err
      help err.message
      raise "bam"
    end
  end

  def opt_parse
    @opts.parse!
  end

  def load_or_create_config
    unless File.exist?(@options.config)
      Stork::Configuration.to_file(@options.config)
    end
    Stork::Configuration.from_file(@options.config)
  end

  def run
    begin
      @plugin.run
    rescue SyntaxError => err
      help err.message
    rescue RestClient::InternalServerError => err
      puts err.message
    rescue RestClient::ResourceNotFound
      puts "Not Found"
    end
  end
end

app = StorkApp.new
app.parse
app.run
