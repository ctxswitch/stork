#!/usr/bin/env ruby

begin
  require 'rubygems'
rescue LoadError
end

begin
  require 'stork'
rescue LoadError
  $LOAD_PATH << File.dirname(__FILE__) + "/../lib"
  require 'stork'
end

require 'optparse'
require 'ostruct'

class StorkCtlApp
  def initialize
    @options = OpenStruct.new
    @options.config = ENV['STORK_CONFIG'] || "/etc/stork/config.rb"
    @options.daemonize = false
    @options.debug = false
    @options.command = :start
  end

  def parse
    opts = OptionParser.new do |o|
      o.banner = "Usage: storkctl start|stop|restart [options]"
      o.on("-c", "--config FILE", "Read configuration from the specified file.") do |config|
        @options.config = config
      end
      o.on("-d", "--daemonize", "Daemonize stork.") do
        @options.daemonize = true
      end
      o.on("-D", "--debug", "Read debuguration from the specified file") do
        @options.debug = true
      end
      o.on("-h", "--help", "Read debuguration from the specified file") do
        puts opts.help
        exit 1
      end
    end

    action = :"#{ARGV.shift}"
    unless [:start, :stop, :restart].include?(action)
      puts opts.help
      exit 1
    end
    
    @options.command = action
    opts.parse!
    load_or_create_config
  end

  def load_or_create_config
    unless File.exist?(@options.config)
      Stork::Configuration.to_file(@options.config)
    end
    Stork::Configuration.from_file(@options.config)
  end

  def run
    @control = Stork::Server::Control.new(@options)

    case @options.command
    when :start
      if @options.daemonize
        start_daemon
      else
        @control.start
      end
    when :stop
      @control.stop
    when :restart
      @restart.restart
    end
  end

  def start_daemon
    if Process.respond_to?(:daemon)
      Process.daemon(true)
      @control.start
    else
      abort 'Process.daemon requires Ruby >= 1.9'
    end
  end
end

app = StorkCtlApp.new
app.parse
app.run